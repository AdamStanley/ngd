"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.html = function (data) { return "\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <title>Angular Dependencies Graph</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <script src=\"http://nlpviz.bpodgursky.com/resources/d3.v3.min.js\" charset=\"utf-8\"></script>\n    <script src=\"http://nlpviz.bpodgursky.com/resources/dagre-d3.js\"></script>\n    <style>\n        .main-svg {\n            position: fixed;\n            left: 0;\n            height: 1000px;\n            width: 100%;\n            border: 1px solid #999;\n        }\n        \n        .node {\n            display: inline-block;\n            padding: 2px 4px;\n            font-size: 11.844px;\n            font-weight: bold;\n            line-height: 14px;\n            color: #ffffff;\n            vertical-align: baseline;\n            white-space: nowrap;\n            text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);\n            background-color: #999999;\n        }\n        \n        text {\n            font-weight: 300;\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            font-size: 14px;\n        }\n        \n        .node>rect,\n        .node>ellipse {\n            stroke-width: 1px;\n            stroke: #333;\n            fill: none;\n            fill: #fff;\n            opacity: 0.5;\n        }\n        \n        .provider rect {\n            fill: #03A9F4;\n        }\n        \n        .directive rect {\n            fill: #4CAF50;\n        }\n        \n        .pipe rect {\n            fill: #FF9800;\n        }\n        \n        .component ellipse {\n            fill: #FF5252;\n        }\n        \n        .module rect {\n            fill: #9C27B0;\n        }\n        \n        .edge rect {\n            fill: #fff\n        }\n        \n        .edgePath path {\n            stroke: #333;\n            stroke-width: 1.5px;\n        }\n    </style>\n    <style>\n        body {\n            font-family: helvetica;\n            font-size: 14px;\n        }\n        \n        #attach {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            left: 0;\n            top: 0;\n            z-index: 999;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"attach\">\n        <svg id=\"svg-canvas\" class=\"main-svg\"></svg>\n    </div>\n\n    <script>\n        window.onload = () => {\n            render(window.__data);\n        }\n\n        function render(data) {\n\n            document.querySelector('#svg-canvas').innerHTML = '';\n\n            // https://github.com/cpettitt/dagre/wiki#configuring-the-layout\n            const g = new dagreD3.graphlib.Graph()\n                .setGraph({\n                    rankdir: 'LR', // TB, BT, LR, or RL\n                    // align: 'UL',\n                    nodesep: 50,\n                    edgesep: 10,\n                    ranksep: 50,\n                    marginx: 0,\n                    marginy: 0,\n                    acyclicer: undefined, //undefined greedy\n                    ranker: 'tight-tree', //tight-tree, longest-path\n                })\n                .setDefaultEdgeLabel(function() {\n                    return {};\n                });\n\n            const nodes = [];\n            const edges = [];\n            const modulesEdges = [];\n\n            populate(data, nodes, edges, modulesEdges);\n\n            nodes.map(node => {\n                node.label = node.name;\n                node.class = node.nodeclass;\n                node.rx = 5;\n                node.ry = 5;\n                switch (node.type) {\n                    case 'component':\n                        node.shape = 'ellipse';\n                        break;\n                    case 'provider':\n                        node.shape = 'rect';\n                        break;\n                }\n                g.setNode(node.id, node);\n            });\n            edges.forEach(edge => {\n                const options = {\n                    lineTension: 0.1,\n                    lineInterpolate: \"bundle\" // bundle, basis, linear\n                };\n                g.setEdge(edge.source, edge.target, options);\n            });\n\n            const _render = new dagreD3.render();\n            const svg = d3.select(\"#svg-canvas\");\n            const svgGroup = svg.append(\"g\");\n\n            _render(d3.select(\"#svg-canvas g\"), g);\n\n            const xCenterOffset = (svg.attr(\"width\") - g.graph().width) / 2;\n            svgGroup.attr(\"transform\", \"translate(\" + xCenterOffset + \", 20)\");\n            svg.attr(\"height\", g.graph().height + 40);\n\n            //  enable zoom and scrolling\n            svgGroup.attr(\"transform\", \"translate(5, 5)\");\n            svg.call(d3.behavior.zoom().on(\"zoom\", function redraw() {\n                svgGroup.attr(\"transform\",\n                    \"translate(\" + d3.event.translate + \")\" + \" scale(\" + d3.event.scale + \")\");\n            }));\n        }\n\n\n        function populate(data, nodes, edges, modulesEdges) {\n            populateNodes(data, nodes);\n            populateEdges(data, edges);\n        }\n\n        function populateEdges(data, edges) {\n            data.map(module => {\n                populateEdgesWithMetadata(module.declarations, edges, module);\n                populateEdgesWithMetadata(module.providers, edges, module);\n                populateEdgesWithMetadata(module.imports, edges, module);\n            });\n        }\n\n        function populateEdgesWithMetadata(deps, edges, parent) {\n            deps.map((metadata) => {\n                if (parent) {\n                    const source = metadata.id;\n                    const target = parent.id;\n                    const id = metadata.id + '__' + parent.id;\n                    edges.push({\n                        source,\n                        target,\n                        id\n                    });\n                }\n                if (metadata.declarations &&\n                    Array.isArray(metadata.declarations) &&\n                    metadata.declarations.length > 0) {\n                    populateEdgesWithMetadata(metadata.declarations, edges, metadata);\n                }\n                if (metadata.providers &&\n                    Array.isArray(metadata.providers) &&\n                    metadata.providers.length > 0) {\n                    populateEdgesWithMetadata(metadata.providers, edges, metadata);\n                }\n            });\n        }\n\n        function populateNodes(data, nodes) {\n            data.map(module => {\n                // providers on a module level\n                populateNodesWithMetadata(module.providers, nodes);\n                populateNodesWithMetadata(module.declarations, nodes);\n                populateNodesWithMetadata(module.imports, nodes);\n                populateNodesWithMetadata(module, nodes);\n            });\n        }\n\n        function populateNodesWithMetadata(deps, nodes) {\n            if (Array.isArray(deps)) {\n                deps.map((metadata) => {\n                    metadata.label = metadata.name;\n                    metadata.nodeclass = 'label ' + metadata.type;\n                    nodes.push(metadata);\n\n                    if (metadata.declarations && Array.isArray(metadata.declarations) && metadata.declarations.length > 0) {\n                        populateNodesWithMetadata(metadata.declarations, nodes);\n                    }\n                    if (metadata.providers && Array.isArray(metadata.providers) && metadata.providers.length > 0) {\n                        // providers on a declaration level\n                        populateNodesWithMetadata(metadata.providers, nodes);\n                    }\n\n                });\n            } else {\n                deps.label = deps.name;\n                deps.nodeclass = 'label module';\n                nodes.push(deps);\n            }\n        }\n    </script>\n    <script>\n        window.__data = " + JSON.stringify(data) + "\n    </script>\n    </body>\n</html>\n"; };
