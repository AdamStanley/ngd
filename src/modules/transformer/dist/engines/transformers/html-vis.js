"use strict";
exports.html = function (data) { return "\n<!doctype html>\n<html>\n<head>\n    <title>Angular Dependencies Graph</title>\n    <style type=\"text/css\">\n        body {\n            font: 10pt sans;\n        }\n        #mynetwork {\n            width: 2000px;\n            height: 1000px;\n        }\n    </style>\n    <script type=\"text/javascript\" src=\"http://visjs.org/dist/vis.js\"></script>\n    <link href=\"http://visjs.org/dist/vis-network.min.css\" rel=\"stylesheet\" type=\"text/css\"/>\n    <script type=\"text/javascript\">\n        var nodes = null;\n        var edges = null;\n        var network = null;\n\n        function destroy() {\n            if (network !== null) {\n                network.destroy();\n                network = null;\n            }\n        }\n\n        function pushDeclaration(declaration) {\n            nodes.push({\n                id: declaration.__id,\n                label: declaration.name+'('+declaration.selector+')',\n                color: \"pink\",\n                shape: 'box',\n                font: {\n                    face: 'monospace',\n                    align: 'left'\n                },\n                level: declaration.__level\n            });\n        }\n\n        function pushProvider(provider) {\n            nodes.push({\n                id: provider.__id,\n                label: provider.name,\n                color: \"orange\",\n                font: {\n                    face: 'monospace',\n                    align: 'left'\n                },\n                level: provider.__level,\n            });\n        }\n        function connectEdges(declarations) {\n            declarations.map((from, arr, i) => {\n                from.declarations.map(to => {\n                    edges.push({\n                        from: from.__id,\n                        to: to.__id,\n                        arrows: 'to',\n                        'smooth': {\n                            'type': 'cubicBezier'\n                        }\n                    });\n                });\n                // Pipes dont have providers!\n                if (from.providers) {\n                    from.providers.map(to => {\n                        edges.push({\n                            from: to.__id,\n                            to: from.__id,\n                            'smooth': {\n                                'type': 'cubicBezier'\n                            }\n                        });\n                    });\n                }\n            });\n        }\n\n        function draw() {\n            destroy();\n            nodes = [];\n            edges = [];\n            var connectionCount = [];\n            window.__data.map(function(Module1){\n                // push declarations\n                for (var i = 0; i < Module1.declarations.length; i++) {\n                    var declaration = Module1.declarations[i];\n                    pushDeclaration(declaration);\n                }\n                // push providers (global and local)\n                for (var i = 0; i < Module1.providers.length; i++) {\n                    var provider = Module1.providers[i];\n                    pushProvider(provider);\n                }\n                // Pipes dont have providers!\n                if (Module1.declarations.providers) {\n                    for (var i = 0; i < Module1.declarations.length; i++) {\n                        var declaration = Module1.declarations[i];\n                        for (var j = 0; j < declaration.providers.length; j++) {\n                            var provider = declaration.providers[j];\n                            pushProvider(provider);\n                        }\n                    }\n                }\n                connectEdges(Module1.declarations);\n            });\n            \n            // create a network\n            var container = document.getElementById('mynetwork');\n            var data = {\n                nodes: nodes,\n                edges: edges\n            };\n\n            var options = {\n                layout: {\n                    hierarchical: {\n                        direction: \"UD\",\n                        sortMethod: \"directed\"\n                    }\n                },\n                interaction: {dragNodes :false},\n                physics: {\n                    enabled: false\n                },\n                configure: {\n                    filter: function (option, path) {\n                        if (path.indexOf('hierarchical') !== -1) {\n                            return true;\n                        }\n                        return false;\n                    },\n                    showButton:false\n                }\n            };\n            network = new vis.Network(container, data, options);\n\n            network.on('select', function(params) {\n                console.log(params.nodes);\n            });\n        }\n    </script>\n    <script>\n    window.__data = " + JSON.stringify(data) + "\n    </script>\n    \n</head>\n\n<body onload=\"draw();\">\n<h2>Angular Dependencies Graph</h2>\n<div id=\"mynetwork\"></div>\n</body>\n</html>\n"; };
